const { ButtonBuilder, ButtonStyle, ActionRowBuilder, EmbedBuilder } = require("discord.js");
const questModel = require("../../models/questSchema");
const emojis = require('../../configs/emojis.json');

module.exports = {
  name: 'findbox',
  aliases: ['fb'],
  category: 'Gambling',
  cooldown: 15,
  description: {
      content: 'T√¨m ra chi·∫øc h·ªôp ch·ª©a ƒë·ª±ng ph·∫ßn th∆∞·ªüng ho·∫∑c m·∫•t h·∫øt.',
      example: 'Findbox 10000 t·ªëi ƒëa 250,000',
      usage: 'fb <s·ªë ti·ªÅn>'
  },
  permissions: {
      bot: ['ViewChannel', 'SendMessages'],
      user: ''
  },
  run: async (client, message, args, prefix, lang) => {
    let Boxes = [
      "<:so0:1037675460127113226>",
      "<:so1:1037675506398658620>",
      "<:so2:1037675570990952458>",
      "<:so3:1037675602972508241>",
      "<:so4:1037675631409897512>",
      "<:so5:1037676087951507516>",
      "<:so6:1037675670333046874>",
      "<:so7:1037675704210427904>",
      "<:so8:1037675894359195658>",
      "<:so9:1037675919629885442>"
    ]
    let cash = await client.cash(message.author.id)
    let text = args.join(' ');
    let bet;
    
    if (cash < 10000) {
      return message.reply(`${client.e.fail} | B·∫°n kh√¥ng c√≤n g√¨ ƒë·ªÉ ƒë·∫∑t! C·∫ßn √≠t nh·∫•t 10.000 Ycoin ƒë·ªÉ ch∆°i!`)
    }
    
    if (text.toLowerCase() === "all") {
      bet = cash >= 250000 ? 250000 : cash;
    } else {
      bet = parseInt(text.replace(/[^\d]/g, ''));
    }
    
    if (!bet || bet < 10000) {
      return message.channel.send(`${client.e.fail} | S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá ho·∫∑c d∆∞·ªõi 10,000 Ycoin`);
    } else if (bet > 250000) {
      return message.channel.send(`${client.e.fail} | S·ªë ti·ªÅn kh√¥ng th·ªÉ l·ªõn h∆°n 250,000 Ycoin`);
    } else if (bet < 1) {return message.channle.send("${client.e.fail} | Ng∆∞·ªùi s·ªëng vui l√≤ng ch∆°i s·ªë d∆∞∆°ng !")}
     else if (bet > cash) {
      return message.reply(`${client.e.fail} | B·∫°n kh√¥ng ƒë·ªß ti·ªÅn ƒë·ªÉ ƒë·∫∑t`);
    }
    
    // Rest of your code...
    
    let Prizes = [
      bet,
      bet * 2,
      bet * 3,
      bet * 4,
      bet
    ]
    let startembed = new EmbedBuilder()
      .setAuthor({ name: message.author.username, icon_url: message.author.displayAvatarURL() })
      .setDescription(`M·ªói chi·∫øc h·ªôp b√™n d∆∞·ªõi c√≥ m·ªôt gi√° tr·ªã b√≠ ·∫©n!
B·∫°n h√£y ch·ªçn chi·∫øc h·ªôp c√≥ gi√° tr·ªã cao nh·∫•t ƒë·ªÉ s·ªü h·ªØu s·ªë ti·ªÅn l·ªùi m√¨nh mong mu·ªën nh√©!    
`)

    let buttonrow1 = new ActionRowBuilder()
      .addComponents(
        new ButtonBuilder()
          .setStyle(ButtonStyle.Primary)
          .setEmoji(Boxes[0])
          .setCustomId('0'),
        new ButtonBuilder()
          .setStyle(ButtonStyle.Primary)
          .setEmoji(Boxes[1])
          .setCustomId('1'),
        new ButtonBuilder()
          .setStyle(ButtonStyle.Primary)
          .setEmoji(Boxes[2])
          .setCustomId('2'),
        new ButtonBuilder()
          .setStyle(ButtonStyle.Primary)
          .setEmoji(Boxes[3])
          .setCustomId('3'),
        new ButtonBuilder()
          .setStyle(ButtonStyle.Primary)
          .setEmoji(Boxes[4])
          .setCustomId('4')
      );
    let buttonrow2 = new ActionRowBuilder()
      .addComponents(
        new ButtonBuilder()
          .setStyle(ButtonStyle.Primary)
          .setEmoji(Boxes[5])
          .setCustomId('5'),
        new ButtonBuilder()
          .setStyle(ButtonStyle.Primary)
          .setEmoji(Boxes[6])
          .setCustomId('6'),
        new ButtonBuilder()
          .setStyle(ButtonStyle.Primary)
          .setEmoji(Boxes[7])
          .setCustomId('7'),
        new ButtonBuilder()
          .setStyle(ButtonStyle.Primary)
          .setEmoji(Boxes[8])
          .setCustomId('8'),
        new ButtonBuilder()
          .setStyle(ButtonStyle.Primary)
          .setEmoji(Boxes[9])
          .setCustomId('9')
      );
    let reply = await message.reply({ embeds: [startembed], components: [buttonrow1, buttonrow2] })
    var collector = reply.createMessageComponentCollector({
      filter: interaction => (interaction.isButton()
        && interaction.message.id == reply.id
        && interaction.user.id == message.author.id
        && interaction.message.author.id == client.user.id)
    })
    collector.on("collect", async (interaction) => {
      if (interaction.user.id !== message.author.id) {  
          return interaction
            .reply({ content: `${client.e.fail} | **${interaction.user.username}** , kh√¥ng ph·∫£i n√∫t d√†nh cho b·∫°n!`, ephemeral: true })
            .catch(e => console.log(e))
      }
      await interaction.deferUpdate()
      await reply.delete()
      let win = false
      let msg
      let rand = Math.floor(Math.random() * 99)
      if (rand <= 29) win = true
      if (win) prize = Prizes[Math.floor(Math.random() * Prizes.length)]
      if (win) await client.cong(message.author.id, prize - bet)
      else await client.tru(message.author.id, bet)
      let msh = await message.reply(`B·∫°n ƒë√£ ch·ªçn chi·∫øc h·ªôp s·ªë ${interaction.customId}\nK·∫øt qu·∫£ l√†..... <a:yl_loading:1109041890667544678>`)
      await client.sleep(2000)
      let msh1 = await msh.edit("V√† ƒë√≥ l√†...")
      await client.sleep(1000)
      let msh2 = await msh1.edit("V√† ƒë√≥ l√† ..")
      await client.sleep(1000)
      await msh2.edit(`${win
        ? `üî• | Ch√∫c m·ª´ng b·∫°n ƒë√£ ch·ªçn tr√∫ng chi·∫øc h·ªôp c√≥ s·ªë ti·ªÅn x${prize / bet} l·∫ßn! 
      B·∫°n ƒë√£ ƒÉn ƒë∆∞·ª£c **__${parseInt(prize).toLocaleString("en-us")} Ycoin__**`
        : `üò≠ | R·∫•t ti·∫øc, b·∫°n ƒë√£ ch·ªçn ph·∫£i chi·∫øc h·ªôp r·ªóng, b·∫°n ƒë√£ m·∫•t **__${parseInt(bet).toLocaleString("en-us")} Ycoin__**`
        }`)

        const questData = await questModel.findOne({ userId: interaction.user.id }); 

        if (questData && questData.gambling.commandName == "findbox") {
          if (questData.gambling.progress < questData.gambling.maxProgress) {
            questData.gambling.progress++;
            await questData.save();
          }

          if (questData.gambling.isComplete == false && questData.gambling.progress >= questData.gambling.maxProgress) {
            const authorId = interaction.user.id;
            const reward = questData.gambling.reward.reward;
            const rewardName = questData.gambling.reward.rewardName;

            handleNotiCompletedQuestFindBox(message, rewardName, reward);

            const rewardNames = {
              "ycoin": async () => { await client.cong(authorId, reward); },
              "gembox": async () => { await client.addgem(authorId, emojis.gembox, reward, 0); },
              "pro_gembox": async () => { await client.addgem(authorId, emojis.progembox, reward, 0); },
              "vip_gembox": async () => { await client.addgem(authorId, emojis.vipgembox, reward, 0); },
            };
            await rewardNames[rewardName]();
            questData.gambling.isComplete = true;
            await questData.save();
          }
        }
    })
  }
}


const handleNotiCompletedQuestFindBox = (message, rewardName, reward) => {
  const reward_emojis = {
      "ycoin": emojis.coin,
      "gembox": emojis.gembox,
      "pro_gembox": emojis.progembox,
      "vip_gembox": emojis.vipgembox
  };

  const notiCompletedQuestEmbed = new EmbedBuilder()
      .addFields({
          name: `Ch√∫c m·ª´ng b·∫°n ƒë√£ xong l√†m xong quest Plant`,
          value: `Ph·∫ßn th∆∞·ªüng: ${reward} ${reward_emojis[rewardName]}`
      })
      .setColor("Green")
      .setTimestamp();
  return message.reply({ embeds: [notiCompletedQuestEmbed] });
};